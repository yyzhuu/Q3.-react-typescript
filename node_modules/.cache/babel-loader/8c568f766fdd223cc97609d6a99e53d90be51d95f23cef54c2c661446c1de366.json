{"ast":null,"code":"var _jsxFileName = \"/Users/yaoyuzhu/react-typescript/react-typescript-demo/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport WalletPage from './components/WalletPage';\nimport Datasource from './utilities/Datasource';\nimport { getPriority } from './utilities/utilities'; // Ensure you import getPriority\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [prices, setPrices] = useState({});\n  const [balances, setBalances] = useState([]);\n  const [sortedBalances, setSortedBalances] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const datasource = new Datasource(\"https://interview.switcheo.com/prices.json\");\n      try {\n        const fetchedPrices = await datasource.getPrices();\n        setPrices(fetchedPrices);\n\n        // Assume you have a method to fetch balances as well\n        const fetchBalances = async () => {\n          const response = await fetch(\"https://interview.switcheo.com/prices.json\");\n          if (!response.ok) {\n            throw new Error(\"Failed to fetch balances\");\n          }\n          const data = await response.json();\n          return data; // Ensure your API returns data in the expected format\n        };\n        const fetchedBalances = await fetchBalances(); // Define this method to fetch balances\n        setBalances(fetchedBalances);\n        setSortedBalances(fetchedBalances); // Initialize sorted balances with fetched balances\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const sortBalances = () => {\n    const sorted = [...balances].sort((a, b) => {\n      const aPriority = getPriority(a.currency);\n      const bPriority = getPriority(b.currency);\n      return bPriority - aPriority; // Sort in descending order\n    });\n    setSortedBalances(sorted);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sortBalances,\n      children: \"Sort Balances\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(WalletPage, {\n      balances: sortedBalances,\n      prices: prices\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"t66SfvCMiHqOMwGd6hCtOSVbumI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","WalletPage","Datasource","getPriority","jsxDEV","_jsxDEV","App","_s","prices","setPrices","balances","setBalances","sortedBalances","setSortedBalances","fetchData","datasource","fetchedPrices","getPrices","fetchBalances","response","fetch","ok","Error","data","json","fetchedBalances","error","console","sortBalances","sorted","sort","a","b","aPriority","currency","bPriority","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yaoyuzhu/react-typescript/react-typescript-demo/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport WalletPage from './components/WalletPage';\nimport Datasource from './utilities/Datasource';\nimport { WalletBalance } from './utilities/interface';\nimport { getPriority } from './utilities/utilities'; // Ensure you import getPriority\n\nconst App: React.FC = () => {\n    const [prices, setPrices] = useState<{ [key: string]: number }>({});\n    const [balances, setBalances] = useState<WalletBalance[]>([]);\n    const [sortedBalances, setSortedBalances] = useState<WalletBalance[]>([]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const datasource = new Datasource(\"https://interview.switcheo.com/prices.json\");\n\n            try {\n                const fetchedPrices = await datasource.getPrices();\n                setPrices(fetchedPrices);\n\n                // Assume you have a method to fetch balances as well\n                const fetchBalances = async (): Promise<WalletBalance[]> => {\n                  \n                  const response = await fetch(\"https://interview.switcheo.com/prices.json\");\n                  if (!response.ok) {\n                      throw new Error(\"Failed to fetch balances\");\n                  }\n                  const data = await response.json();\n                  return data as WalletBalance[]; // Ensure your API returns data in the expected format\n              };\n              \n                const fetchedBalances = await fetchBalances(); // Define this method to fetch balances\n                setBalances(fetchedBalances);\n                setSortedBalances(fetchedBalances); // Initialize sorted balances with fetched balances\n            } catch (error) {\n                console.error('Error fetching data:', error);\n            }\n        };\n\n        fetchData();\n    }, []);\n\n    const sortBalances = () => {\n        const sorted = [...balances].sort((a, b) => {\n            const aPriority = getPriority(a.currency);\n            const bPriority = getPriority(b.currency);\n            return bPriority - aPriority; // Sort in descending order\n        });\n        setSortedBalances(sorted);\n    };\n\n    return (\n        <div>\n            <button onClick={sortBalances}>Sort Balances</button>\n            <WalletPage balances={sortedBalances} prices={prices} />\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,UAAU,MAAM,wBAAwB;AAE/C,SAASC,WAAW,QAAQ,uBAAuB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAA4B,CAAC,CAAC,CAAC;EACnE,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAkB,EAAE,CAAC;EAC7D,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAkB,EAAE,CAAC;EAEzED,SAAS,CAAC,MAAM;IACZ,MAAMe,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,MAAMC,UAAU,GAAG,IAAIb,UAAU,CAAC,4CAA4C,CAAC;MAE/E,IAAI;QACA,MAAMc,aAAa,GAAG,MAAMD,UAAU,CAACE,SAAS,CAAC,CAAC;QAClDR,SAAS,CAACO,aAAa,CAAC;;QAExB;QACA,MAAME,aAAa,GAAG,MAAAA,CAAA,KAAsC;UAE1D,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC;UAC1E,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;YACd,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;UAC/C;UACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;UAClC,OAAOD,IAAI,CAAoB,CAAC;QACpC,CAAC;QAEC,MAAME,eAAe,GAAG,MAAMP,aAAa,CAAC,CAAC,CAAC,CAAC;QAC/CP,WAAW,CAACc,eAAe,CAAC;QAC5BZ,iBAAiB,CAACY,eAAe,CAAC,CAAC,CAAC;MACxC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD;IACJ,CAAC;IAEDZ,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMc,YAAY,GAAGA,CAAA,KAAM;IACvB,MAAMC,MAAM,GAAG,CAAC,GAAGnB,QAAQ,CAAC,CAACoB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MACxC,MAAMC,SAAS,GAAG9B,WAAW,CAAC4B,CAAC,CAACG,QAAQ,CAAC;MACzC,MAAMC,SAAS,GAAGhC,WAAW,CAAC6B,CAAC,CAACE,QAAQ,CAAC;MACzC,OAAOC,SAAS,GAAGF,SAAS,CAAC,CAAC;IAClC,CAAC,CAAC;IACFpB,iBAAiB,CAACgB,MAAM,CAAC;EAC7B,CAAC;EAED,oBACIxB,OAAA;IAAA+B,QAAA,gBACI/B,OAAA;MAAQgC,OAAO,EAAET,YAAa;MAAAQ,QAAA,EAAC;IAAa;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACrDpC,OAAA,CAACJ,UAAU;MAACS,QAAQ,EAAEE,cAAe;MAACJ,MAAM,EAAEA;IAAO;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvD,CAAC;AAEd,CAAC;AAAClC,EAAA,CAlDID,GAAa;AAAAoC,EAAA,GAAbpC,GAAa;AAoDnB,eAAeA,GAAG;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}