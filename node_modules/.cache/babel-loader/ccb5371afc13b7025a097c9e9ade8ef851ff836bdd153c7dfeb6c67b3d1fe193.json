{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\n// Adjust the import based on your project structure\n\nconst useWalletBalances = () => {\n  _s();\n  const [balances, setBalances] = useState([]);\n  useEffect(() => {\n    const fetchBalances = async () => {\n      try {\n        // Replace this URL with the actual endpoint for fetching wallet balances\n        const response = await fetch('https://interview.switcheo.com/prices.json');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setBalances(data);\n      } catch (error) {\n        console.error('Error fetching wallet balances:', error);\n      }\n    };\n    fetchBalances();\n  }, []); // The empty array means this effect runs only once after the initial render\n\n  return balances; // Return the fetched balances\n};\n_s(useWalletBalances, \"wx+R6Xtm2XvGqfNtICZFHdHec2k=\");\nexport default useWalletBalances;","map":{"version":3,"names":["useEffect","useState","useWalletBalances","_s","balances","setBalances","fetchBalances","response","fetch","ok","Error","data","json","error","console"],"sources":["/Users/yaoyuzhu/react-typescript/react-typescript-demo/src/components/UseWalletBalances.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { WalletBalance } from '../utilities/interface'; // Adjust the import based on your project structure\n\nconst useWalletBalances = (): WalletBalance[] => {\n    const [balances, setBalances] = useState<WalletBalance[]>([]);\n\n    useEffect(() => {\n        const fetchBalances = async () => {\n            try {\n                // Replace this URL with the actual endpoint for fetching wallet balances\n                const response = await fetch('https://interview.switcheo.com/prices.json');\n                \n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n\n                const data: WalletBalance[] = await response.json();\n                setBalances(data);\n            } catch (error) {\n                console.error('Error fetching wallet balances:', error);\n            }\n        };\n\n        fetchBalances();\n    }, []); // The empty array means this effect runs only once after the initial render\n\n    return balances; // Return the fetched balances\n};\n\nexport default useWalletBalances;\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACa;;AAExD,MAAMC,iBAAiB,GAAGA,CAAA,KAAuB;EAAAC,EAAA;EAC7C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGJ,QAAQ,CAAkB,EAAE,CAAC;EAE7DD,SAAS,CAAC,MAAM;IACZ,MAAMM,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACA;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC;QAE1E,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAClD;QAEA,MAAMC,IAAqB,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QACnDP,WAAW,CAACM,IAAI,CAAC;MACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MAC3D;IACJ,CAAC;IAEDP,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,OAAOF,QAAQ,CAAC,CAAC;AACrB,CAAC;AAACD,EAAA,CAxBID,iBAAiB;AA0BvB,eAAeA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}